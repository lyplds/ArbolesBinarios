%Ejercicio 1)

max(X,Y,X):- X>=Y.
max(X,Y,Y):- X<Y.

maxABB(X,ab(X,nil,_)).
maxABB(Z,ab(X,I,_)):-maxABB(MaxI,I), max(MaxI,X,Z).

min(X,Y,X):- X=<Y.
min(X,Y,Y):- X>Y.

minABB(X,ab(X,_,nil)).
minABB(Z,ab(X,_,D)):-minABB(MinD,D), min(MinD,X,Z).

abb(nil).
abb(ab(_,nil,nil)).
abb(ab(N,nil,D)):- abb(D), minABB(MN,D), N=<MN.

abb(ab(N,I,nil)) :- abb(I), maxABB(MX,I), N>=MX.
abb(ab(N,I,D)) :- abb(I), abb(D), maxABB(MX,I), N>=MX, minABB(MN,D), N=<MN.

%/--------------------------------------------------------------------------/

%Ejercicio 2)

concat([],Y,Y).
concat([X|Xs],Y,[X|Z]):- concat(Xs,Y,Z).

list_to_ABB([],nil).
list_to_ABB(Xs,ab(N,I,D)):- 
     list_to_ABB(IS,I), 
     list_to_ABB(DS,D),
     concat(IS,[N|DS],Xs).

%/--------------------------------------------------------------------------/

%Ejercicio 3)

dif(H,I,D) :- H > 0, I is H-1, D is H-1.
dif(H,I,D) :- H > 1, I is H-2, D is H-1.
dif(H,I,D) :- H > 1, I is H-1, D is H-2.

abbal(nil,0).
abbal(ab(_,I,D),H) :- dif(H,HI,HD), abbal(I,HI), abbal(D,HD).

%/--------------------------------------------------------------------------/

%Ejercicio 4)


%Ejercicio 4)

longitud([],0).
longitud([_|T],N):-longitud(T,N0), N is N0 + 1.

h_avl(H,L) :- H is ceil(log10(L)/log10(2)).
h_avl(H,L) :- H is ceil(log10(L)/log10(2)) + 1.

list_to_avl([],nil).
list_to_avl(Xs,A):- 
    longitud(Xs,L),
    L>0,
    h_avl(H,L), 
    abbal(A,H), list_to_ABB(Xs,A).

%/--------------------------------------------------------------------------/

